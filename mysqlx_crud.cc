#include <assert.h>
#include <mysqlx/xdevapi.h>
#include <iostream>
#include <list>
#include <string>
#include <vector>

#include "file_utils.hpp"

struct
{
  std::string host = "localhost";
  std::string user = "root";
  std::string pwd = "353213";
  std::string db = "mydb";
  unsigned short port = 33060;
} config;

int main(int argc)
{
  using std::cout;
  using std::endl;
  using namespace mysqlx;

  try {
    Session sess("localhost", 33060, "root", "353213");
    {
      // get version
      RowResult res = sess.sql("show variables like 'version'").execute();
      std::stringstream version;

      version << res.fetchOne().get(1).get<string>();
      int major_version;
      version >> major_version;
      if (major_version < 8) {
        cout << "major_version < 8!" << endl;
        return 0;
      }
    }

    // get all schema
    {
      std::vector<Schema> schemas = sess.getSchemas();
      cout << "schemas name: " << endl;
      for (unsigned i = 0; i < schemas.size(); ++i) {
        std::cout << "#" << i << ": " << schemas[i].getName() << endl;
      }
    }

    cout << "Session accepted, creating collection..." << endl;
    Schema sch = sess.getSchema("mydb", true);
    Collection coll = sch.createCollection("mycoll", true);
    coll.remove("true").execute();
    {
      // Result返回结果execute()语句后有效，下一个execute()失效
      Result res;
      {
        res = coll.add(FileUtils::readFile("menu.json"))
                  .add(FileUtils::readFile("widget.json"))
                  .add(R"({ "name": "Shang San", "age": 18, "sex": 0 })")
                  .execute();
        std::list<DbDoc> ls = {DbDoc(R"({ "name": "Susanne", "age": 24 })"), DbDoc(R"({ "name": "User", "age": 39 })")};
        res = coll.add(ls).execute();
      }

      // Warning
      {
        std::vector<Warning> warnings = res.getWarnings();
        for (auto w : warnings) {
          std::cout << w << endl;
        }
      }

      // getGeneratedIds
      {
        res = coll.add(R"({ "_id": "custom_id", "a" : 1 })").execute();
        std::vector<string> ids = res.getGeneratedIds();
        if (ids.empty()) {
          cout << "No Autogenerated ids" << endl;
        }
      }
      {
        res = coll.add(R"({ "b" : 1 })").execute();
        std::vector<string> ids = res.getGeneratedIds();
        for (auto id : ids) {
          cout << "Autogenerated ids= " << id << endl;
        }
      }

      // getAffectedItemsCount
      {
        cout << res.getAffectedItemsCount() << endl;
      }

      DocResult docs;
      {
        docs = coll.find().execute();  // 返回所有docs
        DbDoc doc = docs.fetchOne();
        for (int i = 0; !doc.isNull(); ++i, doc = docs.fetchOne()) {
          cout << "#" << i << ": " << doc << endl;
          for (Field field : doc) {  // 进入{...}
            cout << "-fild `" << field << "`: " << doc[field] << endl;
          }
          /*
          {
            "id" : "file", "value" : "File", "menuitem" : [
              {"value" : "New", "onclick" : "CreateNewDoc()"}, {"value" : "Open", "onclick" : "OpenDoc()"},
              {"value" : "Close", "onclick" : "CloseDoc()"}
            ]
          }
          */
          if (doc.hasField("menuitem") && doc.fieldType("menuitem") == Value::ARRAY) {
            cout << "\t-menuitem: " << endl;
            for (DbDoc d : doc["menuitem"]) {  // 进入[...]
              for (Field f : d) {              // 进入{...}
                cout << "\t-fild `" << f << "`: " << d[f] << endl;
              }
            }
          }
          /*
          {
            "debug" : "on", "window":
            {
              "title" : "Sample Konfabulator Widget", "name" : "main_window", "width" : 500, "height" : 500
            }
          }
          */
          if (doc.hasField("window") && doc.fieldType("window") == Value::DOCUMENT) {
            DbDoc d = doc["window"];
            for (Field f : d) {  // 进入{...}
              cout << "\t-fild `" << f << "`: " << d[f] << endl;
            }
          }
        }

        {
          docs = coll.find("name like :param").limit(1).bind("param", "S%").execute();
          cout << docs.fetchOne() << endl;

          docs = coll.find("name like :param").bind("param", "S%").execute();
          while (DbDoc doc = docs.fetchOne()) {
            cout << doc << endl;
          }

          docs = coll.find("age > 18").execute();
          while (DbDoc doc = docs.fetchOne()) {
            cout << doc << endl;
          }
        }
      }
    }
  } catch (const mysqlx::Error &err) {
    cout << "ERROR: " << err << endl;
    return 1;
  } catch (std::exception &ex) {
    cout << "STD EXCEPTION: " << ex.what() << endl;
    return 1;
  } catch (const char *ex) {
    cout << "EXCEPTION: " << ex << endl;
    return 1;
  } catch (...) {
    cout << "UNKONW ERROR!" << endl;
    return 2;
  }

  return 0;
}